type Name = string;
//Alias 타입생성 
type Player = {
    readonly name:Name,
    age?:number  //선택적 타입
}

function playerMaker(name:string) : Player { //argument 타입 지정(name:string), return값의 타입지정(Player)
    return {
        name:name
    }
}

const player: [string, number, boolean] = ["daun", 1, true]

//화살표 함수를 썼을 때
const _playerMaker = (name:string) : Player => ({name})

const daun = playerMaker("daun")
daun.age = 24 

//readonly 불변성
const numbers: readonly number[] = [1, 2, 3, 4]

//unknown
let a:unknown;

//let b = a+1 //error

if(typeof a === 'number'){
    let b = a+1 
  } 

if(typeof a === 'string'){
    let b = a.toUpperCase();
}

//void = 비어있다

function hello(){
    console.log('x')
  }

//never
function helloo():never{
    throw new Error("xxx")
  }

function hellooo(name:string|number){
    if(typeof name === "string"){
        name  //string
    }  else if (typeof name === "number"){
        name  //number
    } else {
        name  //never
    }
  }

  //
   function add(a:number, b:number):number {
    return a+b
   }

   const _add = (a:number, b:number) => a+b

   //call signature 타입 만들기
   type Add = (a:number, b:number) => number;

   const add_:Add = (a,b) => a+b

  //overloading
   type Config = {
    path: string,
    state: object
   }

   type Push = {
    (path:string):void
    (config: Config):void
   }

   const push:Push = (config) => {
    if (typeof config === "string") { console.log(config) }
    else {
        console.log(config.path)
    }
   }

   type Dd = {
    (a:number, b:number) :number
    (a:number, b:number, c:number) :number
   }

   const dd:Dd =(a, b, c?: number)=> {
    if(c) return a + b + c
    return a + b
   }